调度算法的基本特征：
  必须能隔离不同数据流之间的互相影响
  不过分影响网络资源利用率的前提下，为单个数据流提供端到端的时延保证
  具有能够通过只控制保留带宽资源来控制数据流的时延上下限能力
  有效利用共享链路带宽【充分利用数据流的统计复用特性，有效地处理突发信源】
  共享链路必须提供加权公平分配
  可实现的简单性
  可扩展性，调度算法适用于巨大的数据流和变化范围很大的链路速率
典型调度算法：
  1.FIFO
  优点：简单，计算成本低
  缺点：无QoS和隔离技术，流与流之间的公平性差
  2.PQ(严格优先级队列调度技术)
  做法：维护多个优先级递减队列，从高到低服务
  优点：有隔离，对低延迟的流有用
  缺点：低优先级队列会出现饥饿状态
  改进方向：需要确保高优先级队列里面的数据量不超过网络可服务数据量的一定比例
  3.GPS(通用处理器共享)
  做法：假设网络数据包是可以无限细分的
  优点：
       每个流有保证速率
       每个流的时延抖动只受自己的队列长度和到达时间影响
       只要数据流速率低于链路速率，系统总是稳定的
       数据流稳定时，增加某些流的权重来降低该流的时延(可以接受？)
  缺点：不能处理长度可变的数据包(流的大小是动态变化的？)
  4.WFQ(加权公平队列算法)
  做法：按数据包离开时间升序调度数据包的work-reserving算法
  优点：
       数据包的完成时间取决于上一个数据包的完成时间和数据包的到达时间
       数据包根据完成时间升序处理
       不会产生局部不公平性
       平均时延控制好
  缺点：跟踪数据流集合开销大
  5.VC(虚拟时钟算法)
  做法：根据数据包的到达时间和用户定义的保留速率计算数据包的时间戳
  优点：无论数据流到达时间早还是晚，服务质量都不受其他流的行为影响
       可以提供带宽时延保证
  缺点：但是在系统轻负荷状态时，突发数据流的带宽会被惩罚
  6.SAG(存储转发队列)
  做法：将输入和输出链路的时间轴分为固定长度的时隙“帧”
  优点：如果流中数据包的最大到达速率小于帧中保留的时间片，那么能保证有限的时延和时延抖动，抖动控制好
  缺点：每个数据包都被引入一个固定的时延θ，时延与θ的分配粒度有关，θ小，时延小，但大θ可以得到更好的带宽利用率
  7.RR(循环队列)
  做法：顺序地移动到下一个要被服务的的队列上
  优点：避免队列因为优先级导致的饥饿
  缺点：
       分组时延难以改进
       每个队列的服务间隔完全依赖于那段时间内其他队列中有多少分组等待发送以及这些分组的长度
       这些变量难以准确预测，所以RR调度容易产生时延抖动
       调度器可以通过改变服务顺序(例如采用顺序1，2，3，2，4，2，1，2，…)更频繁地调度某些队列以给这些队列更频繁的传送机会
       然而分组大小的随机分布仍然会造成时延抖动问题。
  8.DRR(差额循环队列)
  做法：为每个队列分配一个长期权重Q(以权重为比例的时间片)和一个短期差额D;调度器统计每个队列发送的字节数计数器B，当队列中有数据且Q+D>B则进行数据发送
  优点：D在一定程度上平滑数据流的突发，队列通过Q可以获得长期的相对带宽分配，如果激活队列小于N，其他队列可以通过Q值共享未用的输出链路带宽
  缺点：不适合处理变长数据包，因为错过本次处理的队列要等到下一次循环才能得到处理
  9.WRR(加权循环队列)
  做法：Q，D，N，仅当Q+D>B时才服务下一个队列，D可以是一个负值，且被用作下一个循环时对该队列减少发送的数据量
  优点：
  缺点：
  10.SFQ(随机公平队列)
  做法：不对流量进行整形，而是基于流调度传输的数据包
       把每个包hash到一个桶中，对所有的桶进行round-robin，每个桶代表一个流
  优点：
  缺点：
  
参考链接：
1.http://www.h3c.com.cn/MiniSite/Technology_Circle/Net_Reptile/The_Four/Home/Catalog/201104/713017_97665_0.htm
2.https://linux.die.net/man/8/tc-sfq
