#在CDN中协调热对象内存缓存
CDN是一个大型分布式服务器系统，缓存和交付网络内容给用户。CDN服务器中第一级缓存是驻留在内存中的热对象缓存HOC。CDN一个主要的目标是最大化HOC的对象命中率。但是HOC尺寸小，请求对象规模的变化大和请求模式的多样性使得这个目标很有挑战性
一个CDN服务器放置两级缓存，一个小的而快的内存中的缓存HOC，一个大的二级磁盘缓存DC。如果两级缓存均为命中，则会通过WAN从内容提供商源获取对象。
####为什么HOC缓存管理很困难
HOC缓存管理需要做两种决策：缓存提交和缓存换出
新的挑战是：1.请求模式和对象尺寸变化极大，放置一个大对象会换出许多小对象，严重影响OHR。 2.之前集中于缓存尺寸相近的对象的研究大部分不可用。之前的工作主要集中在换出策略上，所有请求的对象都被提交，空间管理主要是换出，没有强调提交策略。3.使用静态门限值的缓存提交策略系统没有实现最优性能。最佳门限值随着时间会变化。动态调整缓存提交参数的简单策略效果不佳。
####HOC设计目标
最大化OHR，面对变化的请求模式的健壮性，低耗费和高并发，没有负面影响。
####基本原理
#####为什么需要一个概率提交函数
e^(-size/c),对象尺寸大于c的保持一个低但不为零的提交概率。which results in eventual admission for popular objects,but not for unpopular ones.
#####在函数e^(-size/c)中使用什么参数c
调整策略会在每隔delta个请求后重新计算最优的c。一个自然的方法就是使用带有影子缓存的上山法来确定最优值c。但是这只能在当前c局部寻找最优值，所以会导致次优结果。相反，本文从缓存中提取整个马尔科夫链模型。可以进行全局搜索来寻找最优值。
#####马尔科夫链调优模型
传统方法来讲，人们对整个缓存状态进行建模，追踪缓存中所有对象和在LRU中对象的序列。虽然这是完全准确，但是对象数量很大时，由于状态组合空间爆炸导致该方法完全不可行。AdaptSize为每个对象创建一个独立的马尔科夫链。每个对象的链最终它在LRU列表中的位置和被换出缓存的概率状态。使用独立的马尔科夫链极大的减少了模型复杂度，现在随着对象数量线性增加，而不是指数增加。
#####马尔科夫链
这个链中有两个重要的参数，第一个是该对象由于被访问而移到LRU链头部的比率。通过收集前delta时间间隔内该对象的聚合统计数据来得到ri，上升率(move up rate)；第二个参数是该对象下降的平均比率，μc，取决于任意对象移到LRU链头部。因为这个和哪个对象被移到顶部无关，μc对于所有对象来说几乎一样。因此，对所有对象考虑一个单个的下降率。通过解决一个方程来得到μc，所有被缓存对象的期望大小不能超过缓存实际可用容量K：Σi=1~N P[object i in cache]si=K。N是前delta时间间隔中观测到的对象的数量，Si是对象i的大小。新模型通过求解所有在缓存中的状态的有限概率来将P[object i in cache]作为c的函数。
定理1：P[object i in cache]=(e^((ri/μc)-1)*e^(-c*si))/(1+((e^(ri/μc)-1)*e^(-c*si))).观察可知，对象i期望的命中数量等于ri乘以对象i在缓存中的长期概率。用来预测门限值参数c的对象命中率OHR就仅仅是请求期望命中的比率：OHR(c)=(Σi=1~N ri*P[object i in cache]/(Σi=1~N ri))
###相关工作
相关工作分为缓存系统研究和缓存调整方法。
####缓存调整方法
虽然对基于大小的换入调整是全新的做法，但是调整已经被用在其他缓存环境中比如在最近和频率之间调整最优平衡，以及分配给缓存区的大小的调整。最常见的调整方法就是带有影子缓存的上山法。其他的方法涉及到配合全局搜索算法的预测模型，使用最广泛的预测模型是栈距离计算，最近作为影子缓存的替代品。栈式距离模型不适用于优化换入策略的参数，因为每个换入参数产生一个不同的请求序列，因此需要重新计算不同的栈式距离分布。


##总结：
为什么要提出AdaptSize这个东西？
重点是：动态调整缓存提交参数的简单策略效果不好，先前的方法在当前CDN环境中效果不好，所以要提出新的调整方法。
为什么不好？
方法1：基于请求尺寸百分比的调整：以请求尺寸分布和到达率的函数来提取最优门限值。但是在对象尺寸分布和最大化OHR的最优门限值之间没有固定的关系。原因是最大化OHR时重要的是对于特定对象尺寸的请求数量是来自一个非常流行的还是来自多个不流行的请求。
方法2：使用上山法和影子缓存：OHR vs threshold的曲线是非凹的，并且会有数个局部最优，上山法通常会卡在这些局部最优值上。尝试增加多个影子缓存，随机化评估参数，但是不能找到一个健壮的变体来一致性优化多条trace的OHR。
方法3：使用概率性提交：使用指数函数，随着对象尺寸的增加而减小提交的概率，还是要找到最优门限值参数
AdaptSize模型的不同之处在于：它结合了对象尺寸和当前请求率之间所有的关系，可以追踪分析，快速找到最优提交策略。问题是怎么确定周期长短。