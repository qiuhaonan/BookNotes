Titan:Fair Packet Scheduling For Commodity Multiqueue NICs
ATC'17
UW-Madison

做了什么：Titan，一个Linux网络栈扩展，系统的解决在不同操作条件下出现的不公平性

为什么要做这个：
    背景：为了能够以10Gbps以上的速度提高线速，现代OS网络堆栈依赖于许多重要的硬件和软件优化
         包括但不限于使用多个发送和接收队列以及分段卸载。
    问题：这些优化带来了大面积的不公平性问题

为什么现在要做这个：
前人做了什么：

问题是什么：
流不公平性问题的三个方面：
1.简单的基于hash策略来为每个队列分配流
    ->当流比队列少的时候，很容易由于hash冲突造成不公平性
  流到队列的优化分配
    ->当流比队列稍微多的时候，也会造成【流不平衡】
2.网卡调度器极力做到每个【传输队列】享有同等的吞吐量，因此按照轮询的方式来从队列中服务数据包
    ->共享队列的流的吞吐量是不共享队列的流的一部分
    ->长此以往，流的吞吐量会收到公平共享的吞吐量的一半或者更少，why？【流不平衡】
3.分片卸载恶化了【队头阻塞】
    ->大型分片会阻塞队列中其他分片的发送
    ->当每个队列中都有一个大型分片时，因为网卡是轮询调度，操作系统会保证进入到每个硬件队列中的数据量是一致的
    ->同时还受到队列数量的影响【流不平衡】

怎么做的：
DQA:Dynamic Queue Assignment
    要解决的问题：当流的数量比队列的数量少时，会有哈希冲突的问题
    解法组件：
        为每个队列计算系统内部的权重的算法
        基于当前网络数据段能使用的每个软件或硬件队列的权重，将段分配到队列的算法
    队列权重计算：
        使用当前进入软件硬件队列对的流量来计算权重
        【假设操作系统会给根据高层策略每个网络流指定一个权重】
        动态追踪共享同一个队列的流的权重总和
        每当流启动和终止的时候，更新队列权重
    队列分配算法：
        动态追踪队列occupancy能使队列分配算法避免哈希冲突问题
        使用贪心算法把流分配到队列中，确保将权重均衡的分配到所有队列
        算法选择权重最小的队列
    进行中：使用无锁优先级队列来允许多个核同时执行队列分配而不必读取每个队列的权重
        且仍然避免选择相同的队列

DQWA:Dynamic Queue Weight Assignment
    要解决的问题：当流的数量比队列数量多时，会有队列不公平问题
        队列权重只是一个操作系统结构体，而网卡只会基于简单的轮询方式服务队列
    解法：修改网卡驱动，将网卡调度器改为按照队列的操作系统权重来进行服务
        使用DRR调度算法来按照权重对队列进行服务

DSOS:Dynamic Segmentation Offloading Sizing
    要解决的问题：当来自竞争流的多个数据段共享相同的软件/硬件队列时，GSO段的大小成为了公平性的最小单元
    解法：当多条流共享相同的队列时，数据包会被从默认的GSO大小分片成更小的段尺寸，然后再放到每个队列的软件队列中
简称：
DQA:
DQWA:
DSOS:
TSO:TCP Segmentation Offloading
TSQ:TCP Small Queues
DQL:Dynamic Queue Limits
GSO:Generic Segmentation Offloading
DCB:
XPS:Multicore-Partitioned Multiqueue
DRR:Deficient Round Robin
WFQ:Weighted Fair Queueing
GPS:Generalized Processor sharing
SFQ:Stochastic Fair Queueing


