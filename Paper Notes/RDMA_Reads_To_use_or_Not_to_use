RDMA Reads:To Use or Not to Use?
Aleksandar Dragojevie
Microsoft Research

1.介绍
  问题：关系数据库或者图数据库(scale-out systems)受到traditional Ethernet networks的挑战
  原因：网络开销很高，以至于横向扩展的解决方案经常需要运行在几十台机器上才能替代单机上的性能
  结果：在Ethernet环境下做横向扩展并不好
  已有做法：分块分区(Partitioning)减少通信量，批处理缓解通信代价
  缺点：增加时延，对时延敏感型应用来说不是一个好的trade-off

  现在的环境：RDMA网络通过提供微妙级的远程内存访问来减少横向扩展的开销,高带宽，高消息率
  潜在受益对象：键值存储，图存储，关系数据库(无规律访问模式，延迟敏感，存储小对象，带宽不是瓶颈)
  
  RPC优点：灵活(在发送响应前，CPU可以执行额外的操作) 
  使用：常用在那些只使用RPC来实现每个对象的间接级别的系统
  原因：这种间接级别使得很容易能够透明地执行系统级任务：内存碎片整理，冷对象驱逐，调整对象大小等

3.性能
  面向连接的传输：
	声明1：简单的操作(从远程内存读取一个对象，不涉及额外计算)，RDMA Read比RPC更加CPU高效
  		原因：RDMA Read可以绕过远程CPU
	声明2：在许多应用中，这些简单的操作占比较高
	->结论：RDMA操作很吸引人
        	原因：大多数系统中CPU是瓶颈，CPU效率可以转化为性能的提升

	声明3：Intel最新的CPU完成每次网络操作需要1000个以上CPU周期
	声明4：NIC每秒可以处理200Million条消息
	声明5：网络技术发展比CPU技术要快
	->结论：未来系统中，CPU仍然是瓶颈

	=>结论：在繁忙的系统上，RDMA Read可以改善时延

  面向无连接的传输：
	声明1：
	        UD缺点：
		1.没有拥塞控制
		2.没有可靠交付
		3.没有分片重组	
	声明2：需要在软件中实现这些功能
	->结论：引入了CPU开销
	声明3：拥塞控制最为关键
	声明4：现存几个拥塞控制方法不针对UD
	->结论：UD不能用于数据中心的RoCE网络下
	->结论：RC的RPC和Read可以用于任何环境下

6.3.FaRM灵活性
  对象大小：
	声明：读取对象时，应用需要提供对象的地址和大小
		原因：不能从地址来推断大小，所需要的slab-level元数据只保存在存储对象副本上，并不是集群中的所有机器
	做法：对于数据库，语言运行时这类应用知道所要读取对象的大小
	做法：对于不知道对象大小的应用，把对象指针和大小归为一类，存放在同一个存储空间上，8bit+56bit
  可变大小的对象：
	做法：新分配内存，拷贝
	做法：固定部分和可变部分，可变部分用链表存储,大多数操作只访问固定部分
