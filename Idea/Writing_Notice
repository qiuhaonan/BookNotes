翻译Stanford InfoLab的Tips for Writing Technical Papers
内容覆盖：
  -文章标题
  -摘要
  -介绍
  -相关工作
  -【文章骨干】
  -性能实验
  -结论
  -未来工作
  -感谢
  -引用
  -附录
  -语法和小规模演讲问题
  -方法
  -版本和发布
  
摘要：
  声明问题，方法和解决方案，以及论文的主要贡献
  如果有背景和动机，就包括一点
  做到事实而全面(Be factual but comprehensive.)
  摘要中的材料不应该在论文中再一次次地重复
  
介绍：
  裁判看完介绍后，他可能已经作出初始决定是否要接受或者拒绝这篇论文了--他会读剩余的内容来寻找他的决策的证据
  如果介绍吸引住了读者，他就会继续读下去，否则就会搁置一边
  介绍应该有五段来回答下面五个问题
  1.问题是什么
  2.这个问题为什么有趣且重要
  3.为什么很难，为什么简单的方法会失效
  4.为什么之前没有被解决，或者之前提出的方法有什么问题，我的方法和他们有什么区别
  5.我的方法和结果的关键部分是什么，如果有局限性也要包括进来
  然后再有一段来写Summary of Contirbutions,它应该以要点形式来列出主要贡献，提出在哪一section中可以找到他们
  这篇材料作为剩余论文的第二大纲，节省空间并消除冗余

相关工作：
  老生常谈问题：相关工作是应该靠近开头还是应该靠近结尾
  -开头：如果它短小且详细，或者立刻对先前工作采取防御姿态很重要，这样的话，相关工作可以放在介绍的后面作为一个subsection
  或者有自己的section2
  
  -结尾：如果它能够一开始就快速的总结出来，或者如果充分的比较需要论文的技术内容
  这样的话，相关工作应该出现在结论之前，可能是一个更一般的section："Disscussion and Related Work"
  
论文骨干：
  规则1：一个全新的重要技术贡献应该在读者读完第三面之前被表达清楚
  规则2：论文的每个section都应该讲一个故事，但是不要陷入这样的陷阱：讲述你是怎么得到结果的整个故事
        仅仅是讲述结果的故事本身。这个故事应该是线性的，能让读者参与到每一步并且期望看到下一步
        并且没有很多的中断(比如：看附录，看下文)
  除此之外，还有重要的部分：
      运行实例：如果有可能的话，在整篇文章中使用一个运行实例，它可以在介绍之后来引入，或者以独立的
      section来介绍
      序言/开端：跟在介绍或者相关工作或者运行实例后面，设定符号和术语。要简洁。
      内容：论文的重点可能包括算法，系统描述，新语言构造，分析等等，只要有可能就使用top-down的描述
      读者应该能看到素材在朝哪个方向迈进，并且他们应该能跳过前面的且仍然能拿到想要的数据

性能实验：
  Many conference expect experiments.
  It's easy to do "hokey" or meaningless experiements and many papers do.
  It's easy to craft experiments to show your work in its best light, and most papers do.
  性能试验怎么衡量：运行时间，重要参数的敏感度，在数据集、问题复杂性上的敏感度等等
  性能试验展示什么：
        绝对性能(可以接受或者可以使用)
        相对原生方法的性能
        相对之前方法的性能
        相对不同方法的性能

未来工作：
  一篇论文的部分价值在于这个工作怎么激发新的研究方向
  --如果是主动follow他人的工作：We are currently extending the algorithm to ...blah blah, and  preliminary results are encouraging
  这样能划定自己的版图
  
    
