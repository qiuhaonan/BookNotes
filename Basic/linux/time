time

原始表示:
  #include<time.h>
  typedef long time_t
微秒级精度:
  #include<sys/time.h>
  struct timeval{
      time_t      tv_sec;
      suseconds_t tv_usec;
   };
纳秒级精度:
  #include<time.h>
  struct timespec{
    time_t tv_sec;
    long   tv_nsec;
  };
  
日期结构体:
  #include<time.h>
  struct tm{
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  #ifdef _BSD_SOURCE
    long tm_gmtoff;
    const char *tm_zone;
    };
   
取得当前时间：
  #include<time.h>
  time_t time(time_t *t);
  更好的接口：
    #include<sys/time.h>
    int gettimeofday(struct timeval *tv,struct timezone *tz);
    tz传入NULL，废弃使用
  高级接口：
    #include<time.h>
    int clock_gettime(clockid_t clock_id,struct timespec *ts);
    clockid_t clocks[]={
      CLOCK_REALTIME,
      CLOCK_MONOTONIC,
      CLOCK_PROCESS_CPUTIME_ID,
      CLOCK_THREAD_CPUTIME_ID,
      CLOCK_MONOTONIC_RAW,
      (clockid_t)-1
     };
  时间转换成字符串：
    #include<time.h>
    char* asctime(const struct tm *tm);
    char* asctime_r(const struct tm *tm,char *buf);//buf的长度至少是26位
  tm----> time_t
    #include<time.h>
    time_t mktime(struct tm *tm);
  time_t -----> ascii
    char* ctime(const time_t *timep);
    char* ctime_r(const time_t *timep,char* buf);
  time_t -------> tm
    #include<time.h>
    struct tm* gmtime(const time_t *timep);
    struct tm* gmtime_r(const time_t *timep,struct tm *result);
  表示为用户时区：
    #include<time.h>
    struct tm * localtime(const time_t *timep);
    struct tm * localtime_r(const time_t *timep,struct tm *result);
  时间做差：
    #include<time.h>
    double difftime(time_t time1,time_t time0);
