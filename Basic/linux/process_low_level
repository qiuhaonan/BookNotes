fork系统调用

#include<sys/types.h>
#include<unistd.h>

pid_t fork(void);
调用成功后，在父进程中返回的是子进程的pid，而在子进程中会返回0

写时复制：
  早期的unix系统中，创建进程调用fork()，内核会复制所有的内部数据结构，复制进程的页表项，然后把父进程的地址空间按页复制到子进程的地址空间中。
  现代unix系统采用了copy-on-write方式。是一种基于惰性算法的优化策略，为了避免复制时的系统开销，其前提假设是：如果有多个进程要读取它们自己的那部分资
  源的副本，那么复制是不必要的。每个进程只要保存一个指向这个资源的指针就可以了。只要没有一个进程修改自己的“副本”，每个进程就好像独占那个资源。
  从而避免了复制带来的开销。如果某个进程想要修改自己的那份资源“副本”，就会开始复制资源，并把副本提供给这个进程。复制过程对进程而言是“透明”的。
  这个进程后面就可以反复修改其持有的副本，而其他进程还是共享原来的那份没有修改过的资源。
  惰性算法的好处就是在于它们会尽量延迟代价高的操作，直到必要时才执行。
  写时复制在内核中实现：这些页被标记为只读，并对内核页相关的数据结构实现写时复制。如果有某个进程试图修改某个页，就会产生缺页中断。
  内核处理缺页中断的处理方式就是对该页执行一次透明复制。这时，清空该页的写时复制属性，表示这个页不再被共享。MMU上有硬件级别的写时复制支持。


exit()终止进程

#include<stdlib.h>
void exit(int status);
status宏：EXIT_SUCCESS   EXIT_FAILURE

等待子进程终止
如果子进程在父进程之前结束，内核把该子进程设置成特殊的进程状态，僵尸进程，只保留最小的概要信息，僵尸进程会等待父进程来查看自己的状态，只有当父进程
获取到了已终止的子进程的信息，这个子进程才会正式消失，如果父进程没有等待子进程，这些进程就会成为幽灵进程，一直存在，占满系统的进程列表，如果父进程
在子进程之前结束了，那么内核会把这些子进程的父进程重新设置为init进程(pid=1)，，init进程会周期性地等待所有子进程，确保不会有长时间的僵尸进程。
#include<sys/types.h>
#include<sys/wait.h>
pid_t wait(int *status);
调用成功则返回终止子进程的pid
解释status的宏：
  int WIFEXITED(int status);
  int WIFSIGNALED(int status);
  int WIFSTOPPED(int status);
  int WIFCONTINUED(int status);
  int WEXITSTATUS(int status);
  int WTERMSIG(int status);
  int WSTOPSIG(int status);
  int WCOREDUMP(int status);
  
等待特定子进程
  #include<sys/types.h>
  #include<sys/wait.h>
  pid_t waitpid(pid_t pid,int *status,int options);
  pid:<-1  等待指定进程组的任何子进程退出，pid的绝对值是进程组的pid
      =-1  等待任何一个子进程，等价于wait()
      =0   等待同一个进程组的任何子进程
      >0   等待进程pid等于pid的子进程。
  status和wait一样
  options:WNOHANG  非阻塞
          WUNTRACED 
          WCONTINUED
          
守护进程：必须是init的子进程;不与任何控制终端交互
  调用fork()，产生进程，将成为守护进程
  在守护进程的父进程中调用exit(),确保祖父进程在子进程结束时会退出，保证守护进程的父进程不再继续运行，而且守护进程不是首进程
  调用setsid，是的守护进程有一个新的进程组和新的会话，并作为二者的首进程
  调用chdir，把当前工作目录改为根目录
  关闭所有的文件描述符
  打开文件描述符0，1，2，重定向到/dev/null
  
  eg:
  #include<sys/types.h>
  #include<sys/stat.h>
  #include<stdlib.h>
  #include<stdio.h>
  #include<fcntl.h>
  #include<unistd.h>
  #include<linux/fs.h>
  
  int main(void)
  {
      pid_t pid;
      int i;
      pid=fork();
      if(pid==-1)
        return -1;
      else if(pid!=0)
              exit(EXIT_SUCCESS);
      
      if(setsid()==-1)
        return -1;
      if(chdir("/")==-1)
        return -1;
      for(i=0;i<NR_OPEN;++i)
        close(i);
      open("/dev/null",O_RDWR);
      dup(0);
      dup(0);
      
      ...
      return 0;
   }
  }
